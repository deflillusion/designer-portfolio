---
// Генерируем CSRF токен для защиты от CSRF атак
const csrfToken =
  Math.random().toString(36).substring(2, 15) +
  Math.random().toString(36).substring(2, 15);

// Функция для валидации email
function validateEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

// Функция для валидации телефона
function validatePhone(phone: string): boolean {
  const phoneRegex = /^\+?[0-9\s\-\(\)]{10,}$/;
  return phoneRegex.test(phone);
}

// Функция для очистки и валидации текста
function sanitizeText(text: string): string {
  return text
    .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "")
    .replace(/<[^>]*>/g, "")
    .trim();
}
---

<section id="contact" class="py-24 relative overflow-hidden">
  <!-- Grid background -->
  <div class="absolute inset-0 opacity-5">
    <div
      class="h-full w-full"
      style="background-image: linear-gradient(to right, #000 1px, transparent 1px), linear-gradient(to bottom, #000 1px, transparent 1px); background-size: 50px 50px; background-position: center;"
    >
    </div>
  </div>

  <!-- Floating elements -->
  <div class="absolute inset-0 pointer-events-none overflow-hidden">
    <div
      class="absolute top-20 left-20 w-2 h-2 bg-gray-400 rounded-full animate-bounce"
      style="animation-duration: 2s;"
    >
    </div>
    <div
      class="absolute top-40 right-32 w-1 h-1 bg-gray-500 rounded-full animate-pulse"
    >
    </div>
    <div
      class="absolute bottom-32 left-32 w-3 h-3 border border-gray-400 animate-spin"
      style="animation-duration: 8s;"
    >
    </div>
    <div
      class="absolute bottom-20 right-20 w-2 h-2 bg-gray-300 animate-pulse"
      style="animation-delay: 1s;"
    >
    </div>
  </div>

  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
    <div class="text-center mb-20 contact-header opacity-0">
      <h2
        class="text-4xl md:text-5xl font-bold tracking-wider mb-6 bg-gradient-to-r from-gray-900 to-gray-600 bg-clip-text text-transparent"
      >
        КОНТАКТЫ
      </h2>
      <div
        class="w-32 h-1 bg-gradient-to-r from-black to-gray-400 mx-auto mb-4"
      >
      </div>
      <p class="text-gray-600 max-w-2xl mx-auto">
        Готов обсудить ваш проект и воплотить ваши идеи в жизнь
      </p>
    </div>

    <div class="flex justify-center">
      <!-- Contact form -->
      <div class="contact-form opacity-0 w-full max-w-2xl">
        <div
          class="bg-white/80 backdrop-blur-sm border border-gray-200 p-8 shadow-xl"
        >
          <h3
            class="text-2xl font-bold tracking-wide mb-8 flex items-center gap-3"
          >
            <svg
              class="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
            СВЯЗАТЬСЯ СО МНОЙ
          </h3>

          <form class="space-y-6" id="contact-form" novalidate>
            <!-- Скрытое поле для защиты от ботов -->
            <input type="hidden" name="honeypot" style="display: none;" />

            <!-- CSRF токен -->
            <input type="hidden" name="csrf_token" value={csrfToken} />

            <div class="grid md:grid-cols-2 gap-6">
              <div class="group">
                <label
                  for="name"
                  class="block text-sm font-bold tracking-wide mb-2 group-focus-within:text-black transition-colors duration-200"
                >
                  ИМЯ *
                </label>
                <input
                  id="name"
                  name="name"
                  type="text"
                  class="w-full px-3 py-2 border border-gray-300 focus:border-black focus:outline-none transition-all duration-300 hover:border-gray-400"
                  placeholder="Ваше имя"
                  required
                  minlength="2"
                  maxlength="50"
                  pattern="[А-Яа-яA-Za-z\s]+"
                  title="Имя должно содержать только буквы и пробелы"
                />
                <div class="text-red-500 text-xs mt-1 hidden" id="name-error">
                </div>
              </div>
              <div class="group">
                <label
                  for="phone"
                  class="block text-sm font-bold tracking-wide mb-2 group-focus-within:text-black transition-colors duration-200"
                >
                  ТЕЛЕФОН *
                </label>
                <input
                  id="phone"
                  name="phone"
                  type="tel"
                  class="w-full px-3 py-2 border border-gray-300 focus:border-black focus:outline-none transition-all duration-300 hover:border-gray-400"
                  placeholder="+7 (___) ___-__-__"
                  required
                  pattern="[\+]?[0-9\s\-\(\)]{10,}"
                  title="Введите корректный номер телефона"
                />
                <div class="text-red-500 text-xs mt-1 hidden" id="phone-error">
                </div>
              </div>
            </div>

            <div class="group">
              <label
                for="email"
                class="block text-sm font-bold tracking-wide mb-2 group-focus-within:text-black transition-colors duration-200"
              >
                EMAIL
              </label>
              <input
                id="email"
                name="email"
                type="email"
                class="w-full px-3 py-2 border border-gray-300 focus:border-black focus:outline-none transition-all duration-300 hover:border-gray-400"
                placeholder="your@email.com"
                pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}"
                title="Введите корректный email адрес"
              />
              <div class="text-red-500 text-xs mt-1 hidden" id="email-error">
              </div>
            </div>

            <div class="group">
              <label
                for="message"
                class="block text-sm font-bold tracking-wide mb-2 group-focus-within:text-black transition-colors duration-200"
              >
                СООБЩЕНИЕ *
              </label>
              <textarea
                id="message"
                name="message"
                class="w-full px-3 py-2 border border-gray-300 min-h-[120px] focus:border-black focus:outline-none transition-all duration-300 hover:border-gray-400 resize-none"
                placeholder="Расскажите о вашем проекте..."
                required
                minlength="10"
                maxlength="1000"
                title="Сообщение должно содержать минимум 10 символов"
              ></textarea>
              <div class="text-red-500 text-xs mt-1 hidden" id="message-error">
              </div>
            </div>

            <button
              type="submit"
              id="submit-btn"
              class="w-full bg-black text-white hover:bg-gray-800 tracking-wide py-4 px-8 group relative overflow-hidden transition-all duration-300 hover:scale-105 hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span
                class="relative z-10 flex items-center justify-center gap-2"
              >
                <svg
                  class="w-4 h-4 group-hover:translate-x-1 transition-transform duration-200"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                </svg>
                <span id="submit-text">ОТПРАВИТЬ СООБЩЕНИЕ</span>
              </span>
              <div
                class="absolute inset-0 bg-gradient-to-r from-gray-800 to-black opacity-0 group-hover:opacity-100 transition-opacity duration-300"
              >
              </div>
            </button>

            <div
              id="form-status"
              data-state="hidden"
              class="hidden mt-6 rounded-lg border px-4 py-3 shadow-lg backdrop-blur-sm transition-all duration-300"
              role="status"
              aria-live="polite"
            >
              <div class="flex items-center gap-3">
                <span
                  id="form-status-indicator"
                  class="inline-flex h-2 w-2 rounded-full bg-gray-400"
                  aria-hidden="true"
                ></span>
                <span
                  id="form-status-text"
                  class="text-sm font-medium tracking-wide"
                ></span>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Rate limiting - отслеживаем количество отправок
    let submitCount = 0;
    const maxSubmits = 10; // Максимум 10 отправок в час
    const submitTimeouts: ReturnType<typeof setTimeout>[] = [];

    // Функция для показа ошибок валидации
    function showError(fieldId: string, message: string) {
      const errorElement = document.getElementById(
        `${fieldId}-error`,
      ) as HTMLElement;
      if (errorElement) {
        errorElement.textContent = message;
        errorElement.classList.remove("hidden");
      }
    }

    // Функция для скрытия ошибок валидации
    function hideError(fieldId: string) {
      const errorElement = document.getElementById(
        `${fieldId}-error`,
      ) as HTMLElement;
      if (errorElement) {
        errorElement.classList.add("hidden");
      }
    }

    // Функция для валидации формы
    function validateForm(formData: FormData): boolean {
      let isValid = true;

      // Проверка honeypot поля
      const honeypot = formData.get("honeypot") as string;
      if (honeypot) {
        console.warn("Bot detected via honeypot");
        return false;
      }

      // Валидация имени
      const name = formData.get("name") as string;
      if (!name || name.length < 2) {
        showError("name", "Имя должно содержать минимум 2 символа");
        isValid = false;
      } else if (!/^[А-Яа-яA-Za-z\s]+$/.test(name)) {
        showError("name", "Имя должно содержать только буквы");
        isValid = false;
      } else {
        hideError("name");
      }

      // Валидация email (необязательный)
      const email = formData.get("email") as string;
      if (
        email &&
        !/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(email)
      ) {
        showError("email", "Введите корректный email");
        isValid = false;
      } else {
        hideError("email");
      }

      // Валидация телефона (обязательный)
      const phone = formData.get("phone") as string;
      if (!phone) {
        showError("phone", "Телефон обязателен");
        isValid = false;
      } else if (!/^\+?[0-9\s\-\(\)]{10,}$/.test(phone)) {
        showError("phone", "Введите корректный номер телефона");
        isValid = false;
      } else {
        hideError("phone");
      }

      // Валидация сообщения
      const message = formData.get("message") as string;
      if (!message || message.length < 10) {
        showError("message", "Сообщение должно содержать минимум 10 символов");
        isValid = false;
      } else if (message.length > 1000) {
        showError(
          "message",
          "Сообщение слишком длинное (максимум 1000 символов)",
        );
        isValid = false;
      } else {
        hideError("message");
      }

      return isValid;
    }

    // Функция для очистки данных
    function sanitizeData(data: any): any {
      const sanitized: any = {};
      for (const [key, value] of Object.entries(data)) {
        if (typeof value === "string") {
          sanitized[key] = value
            .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "")
            .replace(/<[^>]*>/g, "")
            .trim();
        } else {
          sanitized[key] = value;
        }
      }
      return sanitized;
    }

    const observerOptions = {
      threshold: 0.1,
      rootMargin: "0px 0px -50px 0px",
    };

    const contactObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const header = entry.target.querySelector(".contact-header");
          const form = entry.target.querySelector(".contact-form");

          header?.classList.add("animate-fade-in");
          form?.classList.add("animate-slide-up");
        }
      });
    }, observerOptions);

    const contactSection = document.getElementById("contact");
    if (contactSection) {
      contactObserver.observe(contactSection);
    }

    // Form submission с защитой
    const form = document.getElementById("contact-form") as HTMLFormElement;
    const submitBtn = document.getElementById(
      "submit-btn",
    ) as HTMLButtonElement;
    const submitText = document.getElementById("submit-text") as HTMLElement;
    const statusContainer = document.getElementById(
      "form-status",
    ) as HTMLElement | null;
    const statusTextElement = document.getElementById(
      "form-status-text",
    ) as HTMLElement | null;
    const statusIndicator = document.getElementById(
      "form-status-indicator",
    ) as HTMLElement | null;

    type StatusVariant = "info" | "success" | "error";

    let statusAutoHideTimeout: ReturnType<typeof setTimeout> | null = null;
    let statusHideTransitionTimeout: ReturnType<typeof setTimeout> | null = null;

    function clearStatusTimers() {
      if (statusAutoHideTimeout) {
        clearTimeout(statusAutoHideTimeout);
        statusAutoHideTimeout = null;
      }
      if (statusHideTransitionTimeout) {
        clearTimeout(statusHideTransitionTimeout);
        statusHideTransitionTimeout = null;
      }
    }

    function hideStatus(immediate = false) {
      if (!statusContainer) {
        return;
      }

      if (statusAutoHideTimeout) {
        clearTimeout(statusAutoHideTimeout);
        statusAutoHideTimeout = null;
      }

      if (immediate) {
        statusContainer.classList.add("hidden");
        statusContainer.classList.remove("opacity-0", "animate-fade-in");
        statusContainer.dataset.state = "hidden";
        return;
      }

      statusContainer.classList.add("opacity-0");

      if (statusHideTransitionTimeout) {
        clearTimeout(statusHideTransitionTimeout);
      }

      statusHideTransitionTimeout = setTimeout(() => {
        statusContainer?.classList.add("hidden");
        statusContainer?.classList.remove("opacity-0", "animate-fade-in");
        if (statusContainer) {
          statusContainer.dataset.state = "hidden";
        }
        statusHideTransitionTimeout = null;
      }, 250);
    }

    function showStatus(
      type: StatusVariant,
      message: string,
      autoHide = type !== "info",
    ) {
      if (!statusContainer || !statusTextElement || !statusIndicator) {
        return;
      }

      clearStatusTimers();

      statusContainer.classList.remove("hidden", "opacity-0");
      statusContainer.classList.remove("animate-fade-in");
      void statusContainer.offsetWidth;
      statusContainer.classList.add("animate-fade-in");

      statusTextElement.textContent = message;
      statusContainer.dataset.state = type;

      statusIndicator.classList.remove("animate-pulse");
      void statusIndicator.offsetWidth;
      statusIndicator.classList.add("animate-pulse");

      if (autoHide) {
        const duration = type === "error" ? 6000 : 4000;
        statusAutoHideTimeout = setTimeout(() => {
          statusAutoHideTimeout = null;
          hideStatus();
        }, duration);
      }
    }

    if (form) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        // Проверка rate limiting
        if (submitCount >= maxSubmits) {
          showStatus(
            "error",
            "Слишком много попыток отправки. Попробуйте позже.",
          );
          return;
        }

        const formData = new FormData(form);

        // Валидация формы
        if (!validateForm(formData)) {
          showStatus("error", "Проверьте корректность данных формы.");
          return;
        }

        // Очистка данных
        const data = sanitizeData(Object.fromEntries(formData));

        // Увеличиваем счетчик отправок
        submitCount++;

        // Блокируем кнопку
        submitBtn.disabled = true;
        submitText.textContent = "ОТПРАВКА...";

        showStatus("info", "Отправляем сообщение...", false);

        try {
          // Отправляем данные на n8n webhook
          // Используем URL-encoded форму (simple request, без префлайта и парсится на стороне n8n)
          const webhookData = {
            name: (data.name as string) || "",
            email: (data.email as string) || "",
            phone: (data.phone as string) || "",
            message: (data.message as string) || "",
          };

          const formBody = new URLSearchParams();
          Object.entries(webhookData).forEach(([key, value]) => {
            formBody.append(key, String(value ?? ""));
          });

          console.log("Sending data to n8n:", webhookData);

          const response = await fetch(
            "https://n8n.defl-illusion.com/webhook/contact",
            {
              method: "POST",
              mode: "no-cors", // simple request; ответ будет opaque
              body: formBody,
            },
          );

          console.log(
            "Response received:",
            response.status,
            response.statusText,
          );

          // При mode: 'no-cors' response.ok всегда false, но запрос отправляется
          if (response.type === "opaque") {
            console.log("Request sent successfully (no-cors mode)");
          } else if (!response.ok) {
            // При стандартном CORS это может упасть; для надёжности показываем успех, если запрос не был заблокирован на уровне сети
            console.warn("Non-OK response:", response.status, response.statusText);
          }

          showStatus(
            "success",
            "Сообщение отправлено! Мы свяжемся с вами в ближайшее время.",
          );

          // Сбрасываем форму
          form.reset();
        } catch (error) {
          console.error("Ошибка при отправке формы:", error);
          showStatus(
            "error",
            "Не удалось отправить сообщение. Попробуйте ещё раз позже.",
          );
        } finally {
          // Разблокируем кнопку
          submitBtn.disabled = false;
          submitText.textContent = "ОТПРАВИТЬ СООБЩЕНИЕ";
        }

        // Очищаем старые таймауты
        submitTimeouts.forEach((timeout) => clearTimeout(timeout));
        submitTimeouts.length = 0;

        // Сбрасываем счетчик через час
        const timeout = setTimeout(
          () => {
            submitCount = 0;
          },
          60 * 60 * 1000,
        );
        submitTimeouts.push(timeout);
      });
    }

    // Добавляем валидацию в реальном времени
    const inputs = form?.querySelectorAll("input, textarea");
    inputs?.forEach((input) => {
      // Скрываем ошибку при начале ввода
      input.addEventListener("input", () => {
        const fieldId = input.id;
        if (fieldId) {
          hideError(fieldId);
        }
      });

      // Валидируем при потере фокуса
      input.addEventListener("blur", () => {
        const formData = new FormData(form);
        validateForm(formData);
      });
    });
  });
</script>

<style>
  #contact #form-status {
    transform-origin: center;
    transition: opacity 0.25s ease, transform 0.25s ease, box-shadow 0.25s ease;
  }

  #form-status[data-state="info"] {
    border-color: rgba(59, 130, 246, 0.35);
    background-color: rgba(59, 130, 246, 0.08);
    color: #1d4ed8;
    box-shadow: 0 12px 30px -20px rgba(59, 130, 246, 0.65);
  }

  #form-status[data-state="success"] {
    border-color: rgba(16, 185, 129, 0.4);
    background-color: rgba(16, 185, 129, 0.1);
    color: #047857;
    box-shadow: 0 12px 30px -20px rgba(16, 185, 129, 0.6);
  }

  #form-status[data-state="error"] {
    border-color: rgba(239, 68, 68, 0.4);
    background-color: rgba(239, 68, 68, 0.1);
    color: #b91c1c;
    box-shadow: 0 12px 30px -20px rgba(239, 68, 68, 0.6);
  }

  #form-status[data-state="info"] #form-status-indicator {
    animation: statusPulse 1.6s ease-in-out infinite;
    background-color: #3b82f6;
  }

  #form-status[data-state="success"] #form-status-indicator {
    animation: statusGlow 1.4s ease-out forwards;
    background-color: #10b981;
  }

  #form-status[data-state="error"] #form-status-indicator {
    animation: statusPulse 1.1s ease-in-out infinite;
    background-color: #ef4444;
  }

  @keyframes statusPulse {
    0% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.6);
    }
    70% {
      transform: scale(1.2);
      box-shadow: 0 0 0 10px rgba(255, 255, 255, 0);
    }
    100% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(255, 255, 255, 0);
    }
  }

  @keyframes statusGlow {
    0% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.4);
    }
    60% {
      transform: scale(1.25);
      box-shadow: 0 0 0 12px rgba(16, 185, 129, 0);
    }
    100% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(16, 185, 129, 0);
    }
  }
</style>
