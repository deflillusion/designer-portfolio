---
export interface Props {
    projectId?: number;
    projectTitle?: string;
    gallery?: string[];
}

const { projectId, projectTitle, gallery } = Astro.props;
---

<!-- Photo Modal -->
<div
    id="photo-modal"
    class="fixed inset-0 z-50 hidden bg-black/90 backdrop-blur-sm"
>
    <div class="flex items-center justify-center min-h-screen p-2 sm:p-4">
        <div
            class="relative w-full max-w-7xl max-h-[90vh] sm:max-h-[95vh] bg-white rounded-lg overflow-hidden shadow-2xl"
        >
            <!-- Header -->
            <div
                class="flex items-center justify-between p-4 sm:p-6 border-b border-gray-200 bg-white"
            >
                <div>
                    <h2
                        class="text-lg sm:text-2xl font-bold tracking-wide text-gray-900"
                    >
                        {projectTitle}
                    </h2>
                    <p class="text-xs sm:text-sm text-gray-600 mt-1">
                        Фотогалерея проекта
                    </p>
                </div>
                <button
                    id="close-modal"
                    class="p-2 hover:bg-gray-100 rounded-full transition-colors duration-200"
                >
                    <svg
                        class="w-6 h-6 text-gray-600"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <!-- Main Image -->
            <div class="relative bg-gray-100 overflow-hidden">
                <img
                    id="modal-main-image"
                    src=""
                    alt=""
                    class="w-full h-[50vh] sm:h-[70vh] object-contain transition-transform duration-300 ease-in-out cursor-zoom-in"
                />

                <!-- Navigation arrows -->
                <button
                    id="prev-image"
                    class="absolute left-2 sm:left-4 top-1/2 transform -translate-y-1/2 bg-white/90 hover:bg-white p-2 sm:p-3 rounded-full shadow-lg transition-all duration-200 hover:scale-110"
                >
                    <svg
                        class="w-5 h-5 sm:w-6 sm:h-6 text-gray-800"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M15 19l-7-7 7-7"></path>
                    </svg>
                </button>

                <button
                    id="next-image"
                    class="absolute right-2 sm:right-4 top-1/2 transform -translate-y-1/2 bg-white/90 hover:bg-white p-2 sm:p-3 rounded-full shadow-lg transition-all duration-200 hover:scale-110"
                >
                    <svg
                        class="w-5 h-5 sm:w-6 sm:h-6 text-gray-800"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M9 5l7 7-7 7"></path>
                    </svg>
                </button>

                <!-- Zoom controls -->
                <div
                    class="absolute top-2 sm:top-4 right-2 sm:right-4 flex flex-col gap-1 sm:gap-2"
                >
                    <button
                        id="zoom-in"
                        class="bg-white/90 hover:bg-white p-1.5 sm:p-2 rounded-full shadow-lg transition-all duration-200 hover:scale-110"
                    >
                        <svg
                            class="w-4 h-4 sm:w-5 sm:h-5 text-gray-800"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                    </button>
                    <button
                        id="zoom-out"
                        class="bg-white/90 hover:bg-white p-1.5 sm:p-2 rounded-full shadow-lg transition-all duration-200 hover:scale-110"
                    >
                        <svg
                            class="w-4 h-4 sm:w-5 sm:h-5 text-gray-800"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M18 12H6"></path>
                        </svg>
                    </button>
                    <button
                        id="reset-zoom"
                        class="bg-white/90 hover:bg-white p-1.5 sm:p-2 rounded-full shadow-lg transition-all duration-200 hover:scale-110"
                    >
                        <svg
                            class="w-4 h-4 sm:w-5 sm:h-5 text-gray-800"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                            ></path>
                        </svg>
                    </button>
                </div>

                <!-- Image counter -->
                <div
                    class="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/70 text-white px-3 py-1 rounded-full text-sm"
                >
                    <span id="image-counter">1 / 1</span>
                </div>
            </div>

            <!-- Thumbnail Gallery -->
            <div class="p-4 sm:p-8 bg-gray-50">
                <div
                    class="flex gap-3 sm:gap-4 overflow-x-auto pb-2"
                    id="thumbnail-gallery"
                >
                    <!-- Thumbnails will be generated by JavaScript -->
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    class PhotoModal {
        private modal: HTMLElement | null = null;
        private mainImage: HTMLElement | null = null;
        private thumbnailGallery: HTMLElement | null = null;
        private imageCounter: HTMLElement | null = null;
        private currentIndex: number = 0;
        private images: string[] = [];
        private projectTitle: string = "";
        private zoomLevel: number = 1;
        private minZoom: number = 0.5;
        private maxZoom: number = 3;

        constructor() {
            this.modal = document.getElementById("photo-modal");
            this.mainImage = document.getElementById("modal-main-image");
            this.thumbnailGallery =
                document.getElementById("thumbnail-gallery");
            this.imageCounter = document.getElementById("image-counter");

            this.setupEventListeners();
        }

        private setupEventListeners() {
            // Close modal
            document
                .getElementById("close-modal")
                ?.addEventListener("click", () => {
                    this.close();
                });

            // Close on backdrop click
            this.modal?.addEventListener("click", (e) => {
                if (e.target === this.modal && this.modal) {
                    this.close();
                }
            });

            // Navigation arrows
            document
                .getElementById("prev-image")
                ?.addEventListener("click", () => {
                    this.previousImage();
                });

            document
                .getElementById("next-image")
                ?.addEventListener("click", () => {
                    this.nextImage();
                });

            // Zoom controls
            document
                .getElementById("zoom-in")
                ?.addEventListener("click", () => {
                    this.zoomIn();
                });

            document
                .getElementById("zoom-out")
                ?.addEventListener("click", () => {
                    this.zoomOut();
                });

            document
                .getElementById("reset-zoom")
                ?.addEventListener("click", () => {
                    this.resetZoom();
                });

            // Keyboard navigation
            document.addEventListener("keydown", (e) => {
                if (!this.modal?.classList.contains("hidden")) {
                    switch (e.key) {
                        case "Escape":
                            this.close();
                            break;
                        case "ArrowLeft":
                            this.previousImage();
                            break;
                        case "ArrowRight":
                            this.nextImage();
                            break;
                    }
                }
            });

            // Mouse wheel zoom
            this.mainImage?.addEventListener("wheel", (e) => {
                e.preventDefault();
                if (e.deltaY < 0) {
                    this.zoomIn();
                } else {
                    this.zoomOut();
                }
            });
        }

        public open(images: string[], title: string, startIndex: number = 0) {
            this.images = images;
            this.projectTitle = title;
            this.currentIndex = startIndex;
            this.zoomLevel = 1; // Reset zoom when opening modal

            this.updateModal();
            this.modal?.classList.remove("hidden");
            document.body.style.overflow = "hidden";
        }

        public close() {
            this.modal?.classList.add("hidden");
            document.body.style.overflow = "";
        }

        private updateModal() {
            if (!this.mainImage || !this.thumbnailGallery || !this.imageCounter)
                return;

            // Update main image
            (this.mainImage as HTMLImageElement).src =
                this.images[this.currentIndex];
            (this.mainImage as HTMLImageElement).alt =
                `${this.projectTitle} - изображение ${this.currentIndex + 1}`;

            // Apply zoom
            this.applyZoom();

            // Update counter
            this.imageCounter.textContent = `${this.currentIndex + 1} / ${this.images.length}`;

            // Update thumbnails
            this.thumbnailGallery.innerHTML = "";
            this.images.forEach((image, index) => {
                const thumbnail = document.createElement("div");
                thumbnail.className = `flex-shrink-0 cursor-pointer rounded-lg overflow-hidden border-2 transition-all duration-200 ${
                    index === this.currentIndex
                        ? "border-black"
                        : "border-gray-300 hover:border-gray-500"
                }`;

                thumbnail.innerHTML = `
          <img 
            src="${image}" 
            alt="Миниатюра ${index + 1}"
            class="w-24 h-24 object-cover"
          />
        `;

                thumbnail.addEventListener("click", () => {
                    this.currentIndex = index;
                    this.updateModal();
                });

                this.thumbnailGallery?.appendChild(thumbnail);
            });
        }

        private previousImage() {
            this.currentIndex =
                this.currentIndex > 0
                    ? this.currentIndex - 1
                    : this.images.length - 1;
            this.updateModal();
        }

        private nextImage() {
            this.currentIndex =
                this.currentIndex < this.images.length - 1
                    ? this.currentIndex + 1
                    : 0;
            this.updateModal();
        }

        private zoomIn() {
            if (this.zoomLevel < this.maxZoom) {
                this.zoomLevel = Math.min(this.zoomLevel + 0.25, this.maxZoom);
                this.applyZoom();
            }
        }

        private zoomOut() {
            if (this.zoomLevel > this.minZoom) {
                this.zoomLevel = Math.max(this.zoomLevel - 0.25, this.minZoom);
                this.applyZoom();
            }
        }

        private resetZoom() {
            this.zoomLevel = 1;
            this.applyZoom();
        }

        private applyZoom() {
            if (this.mainImage) {
                (this.mainImage as HTMLElement).style.transform =
                    `scale(${this.zoomLevel})`;
            }
        }
    }

    // Initialize modal
    const photoModal = new PhotoModal();

    // Global function to open modal
    (window as any).openPhotoModal = (
        images: string[],
        title: string,
        startIndex: number = 0,
    ) => {
        photoModal.open(images, title, startIndex);
    };
</script>

<style>
    #photo-modal {
        animation: fadeIn 0.3s ease-out;
    }

    #photo-modal.hidden {
        animation: fadeOut 0.3s ease-out;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    @keyframes fadeOut {
        from {
            opacity: 1;
        }
        to {
            opacity: 0;
        }
    }

    #thumbnail-gallery::-webkit-scrollbar {
        height: 4px;
    }

    #thumbnail-gallery::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 2px;
    }

    #thumbnail-gallery::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 2px;
    }

    #thumbnail-gallery::-webkit-scrollbar-thumb:hover {
        background: #555;
    }
</style>
