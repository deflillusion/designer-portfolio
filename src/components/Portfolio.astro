---
import { getFeaturedProjects } from '../data/portfolio';
import PhotoModal from './PhotoModal.astro';
---

<section id="portfolio" class="py-24 relative overflow-hidden">
  <!-- Grid background -->
  <div class="absolute inset-0 opacity-5">
    <div
      class="h-full w-full"
      style="background-image: linear-gradient(to right, #000 1px, transparent 1px), linear-gradient(to bottom, #000 1px, transparent 1px); background-size: 50px 50px; background-position: center;"
    >
    </div>
  </div>

  <!-- Floating elements -->
  <div class="absolute inset-0 pointer-events-none overflow-hidden">
    <div
      class="absolute top-20 left-20 w-2 h-2 bg-gray-400 rounded-full animate-bounce"
      style="animation-duration: 2s;"
    >
    </div>
    <div
      class="absolute top-40 right-32 w-1 h-1 bg-gray-500 rounded-full animate-pulse"
    >
    </div>
    <div
      class="absolute bottom-32 left-32 w-3 h-3 border border-gray-400 animate-spin"
      style="animation-duration: 8s;"
    >
    </div>
    <div
      class="absolute bottom-20 right-20 w-2 h-2 bg-gray-300 animate-pulse"
      style="animation-delay: 1s;"
    >
    </div>
  </div>

  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
    <div class="text-center mb-20 portfolio-header opacity-0">
      <h2 class="text-4xl md:text-5xl font-bold tracking-wider mb-6 bg-gradient-to-r from-gray-900 to-gray-600 bg-clip-text text-transparent">
        ПОРТФОЛИО
      </h2>
      <div class="w-32 h-1 bg-gradient-to-r from-black to-gray-400 mx-auto mb-4"></div>
      <p class="text-gray-600 max-w-2xl mx-auto">
        Избранные проекты, демонстрирующие мой подход к созданию функциональных и красивых пространств
      </p>
    </div>

    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
      {getFeaturedProjects().map((project, index) => (
        <div class={`group border border-gray-200 overflow-hidden hover:shadow-2xl transition-all duration-700 cursor-pointer bg-white/80 backdrop-blur-sm project-card opacity-0 stagger-${(index % 6) + 1}`} data-project-id={project.id} data-project-title={project.title} data-project-gallery={JSON.stringify(project.gallery || [])}>
          <div class="relative aspect-[4/3] overflow-hidden">
            <img
              src={project.image || "/placeholder.svg"}
              alt={project.title}
              class="w-full h-full object-cover transition-all duration-700 group-hover:scale-110"
            />

            <!-- Overlay -->
            <div class="absolute inset-0 bg-black/0 group-hover:bg-black/40 transition-all duration-500"></div>

            <!-- Category badge -->
            <div class="absolute top-4 left-4 bg-white/95 backdrop-blur-sm px-3 py-1 transition-all duration-300 group-hover:bg-black group-hover:text-white">
              <span class="text-xs font-bold tracking-wide">{project.category}</span>
            </div>

            <!-- Year badge -->
            <div class="absolute top-4 right-4 bg-white/95 backdrop-blur-sm px-3 py-1 transition-all duration-300 group-hover:bg-white group-hover:text-black">
              <span class="text-xs font-bold tracking-wide">{project.year}</span>
            </div>

            <!-- Hover icon -->
            <div class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-500">
              <div class="bg-white/90 p-4 rounded-full hover:bg-white transition-colors duration-200 hover:scale-110 transform">
                <svg class="w-6 h-6 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
              </div>
            </div>
          </div>

          <div class="p-6 relative">
            <div class="flex justify-between items-start mb-2">
              <h3 class="font-bold tracking-wide group-hover:text-black transition-colors duration-300">
                {project.title}
              </h3>
              <div class="w-2 h-2 bg-gray-400 group-hover:bg-black transition-colors duration-300"></div>
            </div>
            <p class="text-sm text-gray-600">ПЛОЩАДЬ: {project.area}</p>

            <!-- Animated underline -->
            <div class="absolute bottom-0 left-6 right-6 h-0.5 bg-gradient-to-r from-transparent via-black to-transparent scale-x-0 group-hover:scale-x-100 transition-transform duration-500"></div>
          </div>
        </div>
      ))}
    </div>

    <!-- View all button -->
    <div class="text-center mt-16 portfolio-button opacity-0">
      <a
        href="/portfolio"
        class="inline-flex items-center justify-center group bg-black text-white px-8 py-4 tracking-wide hover:bg-gray-800 transition-all duration-300 hover:scale-105 hover:shadow-xl relative overflow-hidden"
      >
        <span class="relative z-10 flex items-center gap-2">
          ПОСМОТРЕТЬ ВСЕ ПРОЕКТЫ
          <svg class="w-4 h-4 group-hover:translate-x-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
          </svg>
        </span>
        <div class="absolute inset-0 bg-gradient-to-r from-gray-800 to-black opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
      </a>
    </div>
  </div>
</section>

<!-- Photo Modal -->
<PhotoModal />

<script>
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const portfolioObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const header = entry.target.querySelector('.portfolio-header');
        const cards = entry.target.querySelectorAll('.project-card');
        const button = entry.target.querySelector('.portfolio-button');

        header?.classList.add('animate-fade-in');
        cards.forEach(card => card.classList.add('animate-slide-up'));
        
        setTimeout(() => {
          button?.classList.add('animate-fade-in');
        }, 500);
      }
    });
  }, observerOptions);

  document.addEventListener('DOMContentLoaded', () => {
    const portfolioSection = document.getElementById('portfolio');
    if (portfolioSection) {
      portfolioObserver.observe(portfolioSection);
    }

    // Add click handlers for project cards
    const projectCards = document.querySelectorAll('.project-card');
    projectCards.forEach(card => {
      card.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        // Don't open modal if clicking on buttons or links
        if (target.closest('button') || target.closest('a')) {
          return;
        }

        const projectId = card.getAttribute('data-project-id');
        const projectTitle = card.getAttribute('data-project-title');
        const galleryData = card.getAttribute('data-project-gallery');

        if (projectId && projectTitle && galleryData) {
          try {
            const gallery = JSON.parse(galleryData);
            if (gallery && gallery.length > 0) {
              (window as any).openPhotoModal(gallery, projectTitle, 0);
            }
          } catch (error) {
            console.error('Error parsing gallery data:', error);
          }
        }
      });
    });
  });
</script>
